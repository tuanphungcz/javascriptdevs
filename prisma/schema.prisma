generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Site {
  id              String  @id
  stargazersCount Int?
  imageUrl        String?
  category        String?
  websiteUrl      String?
  githubUrl       String?
  description     String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model JobStory {
  id       Int       @id @default(autoincrement())
  jobItems JobItem[]

  title             String
  firebaseId        Int      @unique
  firebaseCreatedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobItem {
  id                Int      @id @default(autoincrement())
  by                String
  company           String?
  text              String
  firebaseId        Int      @unique
  firebaseCreatedAt DateTime
  storyId           Int
  jobStory          JobStory @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  json              Json?
  partTime          Boolean  @default(false)
  contract          Boolean  @default(false)
  title             String?
  remote            Boolean  @default(false)
  jobTags           JobTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobTag {
  id       Int       @id @default(autoincrement())
  slug     String    @unique
  jobItems JobItem[]
}
